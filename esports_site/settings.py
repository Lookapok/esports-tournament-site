"""
Django settings for esports_site project.

Generated by 'django-admin startproject' using Django 5.2.5.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

from pathlib import Path
from decouple import config

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

SECRET_KEY = config('SECRET_KEY')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = config('DEBUG', default=False, cast=bool)

# 允許的主機設定 - 支援本地開發和 Render 部署
ALLOWED_HOSTS = [
    '127.0.0.1', 
    'localhost',
    'winnerstakesall.onrender.com',  # Render 部署域名
    '.onrender.com',  # 允許所有 Render 子域名
]

# ===== 環境相關安全設定 =====
# 檢查是否在 Render 生產環境
IS_RENDER = config('RENDER', default=False, cast=bool)

if IS_RENDER:  # Render 生產環境
    # 啟用 HTTPS 安全設定（僅 Render 生產環境）
    SECURE_SSL_REDIRECT = True
    SECURE_HSTS_SECONDS = 31536000  # 1年
    SECURE_HSTS_INCLUDE_SUBDOMAINS = True
    SECURE_HSTS_PRELOAD = True
    SESSION_COOKIE_SECURE = True
    CSRF_COOKIE_SECURE = True
    
    # Render 使用代理，需要設定代理標頭
    SECURE_PROXY_SSL_HEADER = ('HTTP_X_FORWARDED_PROTO', 'https')
    
    # CSRF 信任的來源
    CSRF_TRUSTED_ORIGINS = [
        'https://winnerstakesall.onrender.com',
        'https://*.onrender.com',
    ]
else:  # 本地開發環境（支援 HTTP 和 HTTPS）
    # 本地開發 - 保持彈性，支援 HTTP 和 HTTPS
    SECURE_SSL_REDIRECT = False  # 不強制重定向到 HTTPS
    SECURE_HSTS_SECONDS = 0
    SECURE_HSTS_INCLUDE_SUBDOMAINS = False
    SECURE_HSTS_PRELOAD = False
    SESSION_COOKIE_SECURE = False  # 允許 HTTP cookies
    CSRF_COOKIE_SECURE = False     # 允許 HTTP CSRF cookies
    
    # 不設定代理標頭
    SECURE_PROXY_SSL_HEADER = None
    
    # 本地 CSRF 信任來源（支援 HTTP 和 HTTPS）
    CSRF_TRUSTED_ORIGINS = [
        'http://127.0.0.1:8000',
        'http://localhost:8000',
        'https://127.0.0.1:8000',
        'https://localhost:8000',
    ]

# 通用安全設定
SESSION_COOKIE_HTTPONLY = True
SESSION_COOKIE_SAMESITE = 'Lax'
SESSION_COOKIE_AGE = 3600 * 24 * 7  # 7天
CSRF_COOKIE_HTTPONLY = True  # 防止 JavaScript 存取 CSRF Token
CSRF_COOKIE_SAMESITE = 'Lax'  # 防止跨站請求偽造攻擊

# ===== 安全標頭設定 =====
# 防止 XSS (跨站腳本) 攻擊
SECURE_BROWSER_XSS_FILTER = True

# 防止內容類型嗅探攻擊
SECURE_CONTENT_TYPE_NOSNIFF = True

# 防止點擊劫持攻擊 (Clickjacking)
X_FRAME_OPTIONS = 'DENY'

# 控制推薦人政策，保護用戶隱私
SECURE_REFERRER_POLICY = 'strict-origin-when-cross-origin'

# 防止在不安全的連接中洩漏安全資訊
SECURE_CROSS_ORIGIN_OPENER_POLICY = 'same-origin'


# Application definition

INSTALLED_APPS = [
    'monitoring',
    'tournaments.apps.TournamentsConfig',
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'rest_framework',
    'rest_framework.authtoken', # <-- Add comma here
    'django_tables2',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'whitenoise.middleware.WhiteNoiseMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    # 監控中介軟體
    'monitoring.middleware.APIMonitoringMiddleware',
    'monitoring.middleware.BusinessLogicMiddleware',
]

ROOT_URLCONF = 'esports_site.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR / 'templates'],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]
WSGI_APPLICATION = 'esports_site.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

import dj_database_url

# 資料庫配置 - 支援本地和生產環境
DATABASE_URL = config('DATABASE_URL', default='')

if DATABASE_URL:
    # 生產環境：使用 Render 提供的 PostgreSQL
    DATABASES = {
        'default': dj_database_url.parse(DATABASE_URL, conn_max_age=600, conn_health_checks=True)
    }
    # PostgreSQL 特定優化
    DATABASES['default']['OPTIONS'] = {
        'OPTIONS': '-c default_transaction_isolation=read_committed'
    }
else:
    # 本地開發環境：PostgreSQL 或 SQLite
    DATABASES = {
        'default': {
            'ENGINE': config('DB_ENGINE', default='django.db.backends.sqlite3'),
            'NAME': config('DB_NAME', default=BASE_DIR / 'db.sqlite3'),
            'USER': config('DB_USER', default=''),
            'PASSWORD': config('DB_PASSWORD', default=''),
            'HOST': config('DB_HOST', default=''),
            'PORT': config('DB_PORT', default=''),
            'OPTIONS': {
                'timeout': 20,  # SQLite 連接超時
            } if config('DB_ENGINE', default='django.db.backends.sqlite3') == 'django.db.backends.sqlite3' else {}
        }
    }

# ===== 快取配置優化 =====
# 根據環境選擇不同的快取後端
REDIS_URL = config('REDIS_URL', default='')

# 檢查是否應該使用 Redis（生產環境或有 REDIS_URL）
USE_REDIS = REDIS_URL and (IS_RENDER or config('USE_REDIS', default=False, cast=bool))

if USE_REDIS:
    # 生產環境或明確指定：使用 Redis 快取
    print(f"🚀 使用 Redis 快取: {REDIS_URL[:20]}...")
    CACHES = {
        'default': {
            'BACKEND': 'django_redis.cache.RedisCache',
            'LOCATION': REDIS_URL,
            'OPTIONS': {
                'CLIENT_CLASS': 'django_redis.client.DefaultClient',
                'PARSER_CLASS': 'redis.connection.HiredisParser',
                'CONNECTION_POOL_KWARGS': {
                    'max_connections': 50,
                    'retry_on_timeout': True,
                },
                'COMPRESSOR': 'django_redis.compressors.zlib.ZlibCompressor',
                'IGNORE_EXCEPTIONS': True,  # 快取失敗時不中斷應用
            },
            'TIMEOUT': 900,  # 15 分鐘預設超時
            'VERSION': 1,
        }
    }
    # Redis 作為 Session 存儲
    SESSION_ENGINE = 'django.contrib.sessions.backends.cache'
    SESSION_CACHE_ALIAS = 'default'
    SESSION_COOKIE_AGE = 1800  # 30 分鐘
else:
    # 開發環境：使用優化的內存快取
    print("💻 使用本地記憶體快取")
    CACHES = {
        'default': {
            'BACKEND': 'django.core.cache.backends.locmem.LocMemCache',
            'LOCATION': 'esports-dev-cache',
            'TIMEOUT': 600,  # 10 分鐘
            'OPTIONS': {
                'MAX_ENTRIES': 5000,  # 增加快取容量
                'CULL_FREQUENCY': 3,  # 更積極的清理策略
            }
        }
    }

# 快取金鑰配置
CACHE_MIDDLEWARE_KEY_PREFIX = 'esports_v2'  # 更新版本避免舊快取
CACHE_MIDDLEWARE_SECONDS = 300  # 中間件快取 5 分鐘

# 快取版本控制（用於清除快取）
CACHE_VERSION = 2
CACHE_MIDDLEWARE_SECONDS = 300  # 頁面快取 5 分鐘


# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = 'static/'

STATICFILES_DIRS = [
    BASE_DIR / 'tournaments/static',
]

# 生產環境靜態檔案收集目錄
STATIC_ROOT = BASE_DIR / 'staticfiles'
# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'


# esports_site/settings.py
MEDIA_URL = '/media/'
MEDIA_ROOT = BASE_DIR / 'media'

# ===== WhiteNoise 配置 - 解決生產環境 Media 文件顯示問題 =====
# WhiteNoise 6.x 的正確配置方式
WHITENOISE_USE_FINDERS = True  # 讓 WhiteNoise 能找到靜態文件

# 開發環境專用設定
if not IS_RENDER:  # 本地開發環境
    WHITENOISE_AUTOREFRESH = True  # 開發時自動重新載入

# 設定 WhiteNoise 的壓縮選項（提升效能）
WHITENOISE_SKIP_COMPRESS_EXTENSIONS = ['jpg', 'jpeg', 'png', 'gif', 'webp', 'zip', 'gz', 'tgz', 'bz2', 'tbz', 'xz', 'br']
WHITENOISE_MAX_AGE = 31536000  # 1年的快取時間

# ===== 前端資源優化配置 =====
# Gzip 壓縮配置
WHITENOISE_COMPRESS_EXTENSIONS = [
    'css', 'js', 'svg', 'json', 'xml', 'txt', 'html'
]

# 靜態文件快取配置
WHITENOISE_MAX_AGE = 31536000  # 1年快取

# 禁用不必要的中間件以提高性能
if IS_RENDER:  # 生產環境
    # 移除一些開發專用的中間件
    pass

# ===== 資料庫連線池優化 =====
if 'postgresql' in DATABASES['default']['ENGINE']:
    DATABASES['default'].update({
        'CONN_MAX_AGE': 600,  # 連線保持 10 分鐘
        'OPTIONS': {
            'MAX_CONNS': 20,  # 最大連線數
            'AUTOCOMMIT': True,
        }
    })

# ===== 模板快取優化 =====
if IS_RENDER:  # 生產環境
    for template_config in TEMPLATES:
        if 'OPTIONS' not in template_config:
            template_config['OPTIONS'] = {}
        template_config['OPTIONS']['loaders'] = [
            ('django.template.loaders.cached.Loader', [
                'django.template.loaders.filesystem.Loader',
                'django.template.loaders.app_directories.Loader',
            ]),
        ]

# ===== 日誌優化 =====
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'handlers': {
        'file': {
            'level': 'WARNING' if IS_RENDER else 'INFO',
            'class': 'logging.FileHandler',
            'filename': BASE_DIR / 'logs' / 'django.log',
        },
    },
    'loggers': {
        'django': {
            'handlers': ['file'],
            'level': 'WARNING' if IS_RENDER else 'INFO',
            'propagate': True,
        },
    },
}

# Debug 模式下的額外日誌配置
if DEBUG:
    LOGGING['handlers']['console']['level'] = 'DEBUG'
    for logger in LOGGING['loggers'].values():
        if 'level' in logger:
            logger['level'] = 'DEBUG'

# ===== 日誌監控系統配置 =====
import os
from pathlib import Path

# 日誌目錄
LOGS_DIR = BASE_DIR / 'logs'
LOGS_DIR.mkdir(exist_ok=True)

# 日誌配置
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'verbose': {
            'format': '{levelname} {asctime} {module} {process:d} {thread:d} {message}',
            'style': '{',
        },
        'json': {
            '()': 'pythonjsonlogger.jsonlogger.JsonFormatter',
            'format': '%(levelname)s %(asctime)s %(module)s %(process)d %(thread)d %(message)s'
        },
        'simple': {
            'format': '{levelname} {asctime} {message}',
            'style': '{',
        },
    },
    'handlers': {
        'console': {
            'level': 'INFO',
            'class': 'logging.StreamHandler',
            'formatter': 'simple'
        },
        'django_file': {
            'level': 'INFO',
            'class': 'logging.handlers.RotatingFileHandler',
            'filename': LOGS_DIR / 'django.log',
            'maxBytes': 1024*1024*10,  # 10MB
            'backupCount': 5,
            'formatter': 'json',
        },
        'api_file': {
            'level': 'INFO',
            'class': 'logging.handlers.RotatingFileHandler',
            'filename': LOGS_DIR / 'api.log',
            'maxBytes': 1024*1024*10,  # 10MB
            'backupCount': 5,
            'formatter': 'json',
        },
        'business_file': {
            'level': 'INFO',
            'class': 'logging.handlers.RotatingFileHandler',
            'filename': LOGS_DIR / 'business.log',
            'maxBytes': 1024*1024*10,  # 10MB
            'backupCount': 5,
            'formatter': 'json',
        },
        'error_file': {
            'level': 'ERROR',
            'class': 'logging.handlers.RotatingFileHandler',
            'filename': LOGS_DIR / 'error.log',
            'maxBytes': 1024*1024*10,  # 10MB
            'backupCount': 5,
            'formatter': 'json',
        },
    },
    'loggers': {
        'django': {
            'handlers': ['console', 'django_file'],
            'level': 'INFO',
            'propagate': True,
        },
        'tournaments.api': {
            'handlers': ['console', 'api_file'],
            'level': 'INFO',
            'propagate': False,
        },
        'tournaments.business': {
            'handlers': ['console', 'business_file'],
            'level': 'INFO',
            'propagate': False,
        },
        'monitoring': {
            'handlers': ['console', 'api_file'],
            'level': 'INFO',
            'propagate': False,
        },
        'root': {
            'handlers': ['console', 'error_file'],
            'level': 'ERROR',
        },
    },
}

# Debug 模式下的額外日誌配置
if DEBUG:
    LOGGING['handlers']['console']['level'] = 'DEBUG'
    for logger in LOGGING['loggers'].values():
        if 'level' in logger:
            logger['level'] = 'DEBUG'