"""
Django settings for esports_site project.

Generated by 'django-admin startproject' using Django 5.2.5.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

from pathlib import Path
from decouple import config

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

SECRET_KEY = config('SECRET_KEY')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = config('DEBUG', default=False, cast=bool)

ALLOWED_HOSTS = [
    'winnerstakesall.onrender.com', 
    '127.0.0.1', 
    'localhost',
    # Render.com 自動生成的網域
    '.onrender.com',
]

# ===== HTTPS 安全設定 =====
# 只在生產環境啟用 HTTPS 強制重定向
SECURE_SSL_REDIRECT = not DEBUG

# HTTP Strict Transport Security (HSTS) 設定
SECURE_HSTS_SECONDS = 31536000 if not DEBUG else 0  # 1年 (365天 * 24小時 * 3600秒)
SECURE_HSTS_INCLUDE_SUBDOMAINS = not DEBUG
SECURE_HSTS_PRELOAD = not DEBUG

# 安全代理設定 (適用於 Nginx, Cloudflare 等反向代理)
SECURE_PROXY_SSL_HEADER = ('HTTP_X_FORWARDED_PROTO', 'https')

# ===== Cookie 和 Session 安全設定 =====
# Session Cookie 安全設定
SESSION_COOKIE_SECURE = not DEBUG  # 只在 HTTPS 下傳輸 Session Cookie
SESSION_COOKIE_HTTPONLY = True  # 防止 JavaScript 存取 Session Cookie
SESSION_COOKIE_SAMESITE = 'Lax'  # 防止跨站請求偽造攻擊
SESSION_COOKIE_AGE = 3600 * 24 * 7  # Session 過期時間：7天

# CSRF Cookie 安全設定
CSRF_COOKIE_SECURE = not DEBUG  # 只在 HTTPS 下傳輸 CSRF Token
CSRF_COOKIE_HTTPONLY = True  # 防止 JavaScript 存取 CSRF Token
CSRF_COOKIE_SAMESITE = 'Lax'  # 防止跨站請求偽造攻擊

# ===== 安全標頭設定 =====
# 防止 XSS (跨站腳本) 攻擊
SECURE_BROWSER_XSS_FILTER = True

# 防止內容類型嗅探攻擊
SECURE_CONTENT_TYPE_NOSNIFF = True

# 防止點擊劫持攻擊 (Clickjacking)
X_FRAME_OPTIONS = 'DENY'

# 控制推薦人政策，保護用戶隱私
SECURE_REFERRER_POLICY = 'strict-origin-when-cross-origin'

# 防止在不安全的連接中洩漏安全資訊
SECURE_CROSS_ORIGIN_OPENER_POLICY = 'same-origin'


# Application definition

INSTALLED_APPS = [
    'monitoring',
    'tournaments.apps.TournamentsConfig',
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'rest_framework',
    'rest_framework.authtoken', # <-- Add comma here
    'django_tables2',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'whitenoise.middleware.WhiteNoiseMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    # 監控中介軟體
    'monitoring.middleware.APIMonitoringMiddleware',
    'monitoring.middleware.BusinessLogicMiddleware',
]

ROOT_URLCONF = 'esports_site.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR / 'templates'],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]
WSGI_APPLICATION = 'esports_site.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

# PostgreSQL 設定
DATABASES = {
    'default': {
        'ENGINE': config('DB_ENGINE', default='django.db.backends.sqlite3'),
        'NAME': config('DB_NAME', default=BASE_DIR / 'db.sqlite3'),
        'USER': config('DB_USER', default=''),
        'PASSWORD': config('DB_PASSWORD', default=''),
        'HOST': config('DB_HOST', default=''),
        'PORT': config('DB_PORT', default=''),
    }
}

# Cache configuration
CACHES = {
    'default': {
        'BACKEND': 'django.core.cache.backends.locmem.LocMemCache',
        'LOCATION': 'unique-snowflake',
        'TIMEOUT': 300,  # 5 分鐘預設過期時間
        'OPTIONS': {
            'MAX_ENTRIES': 1000,
        }
    }
}

# 如果要使用 Redis (需要安裝 redis 和 django-redis)
# CACHES = {
#     'default': {
#         'BACKEND': 'django_redis.cache.RedisCache',
#         'LOCATION': 'redis://127.0.0.1:6379/1',
#         'OPTIONS': {
#             'CLIENT_CLASS': 'django_redis.client.DefaultClient',
#         },
#         'TIMEOUT': 300,
#     }
# }


# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = 'static/'

STATICFILES_DIRS = [
    BASE_DIR / 'tournaments/static',
]

# 生產環境靜態檔案收集目錄
STATIC_ROOT = BASE_DIR / 'staticfiles'
# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'


# esports_site/settings.py
MEDIA_URL = '/media/'
MEDIA_ROOT = BASE_DIR / 'media'

# esports_site/settings.py
LOGIN_REDIRECT_URL = '/'

# 在檔案最下方新增這整個區塊
REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': [
        # 設定預設的認證方式為 Token 認證
        'rest_framework.authentication.TokenAuthentication',
    ],
    'DEFAULT_PERMISSION_CLASSES': [
        # 設定預設的權限為「必須是已登入的使用者」
        'rest_framework.permissions.IsAuthenticated',
    ]
}

# 用於使用者上傳檔案 (例如隊伍 Logo)

# ===== 日誌監控系統配置 =====
import os
from pathlib import Path

# 日誌目錄
LOGS_DIR = BASE_DIR / 'logs'
LOGS_DIR.mkdir(exist_ok=True)

# 日誌配置
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'verbose': {
            'format': '{levelname} {asctime} {module} {process:d} {thread:d} {message}',
            'style': '{',
        },
        'json': {
            '()': 'pythonjsonlogger.jsonlogger.JsonFormatter',
            'format': '%(levelname)s %(asctime)s %(module)s %(process)d %(thread)d %(message)s'
        },
        'simple': {
            'format': '{levelname} {asctime} {message}',
            'style': '{',
        },
    },
    'handlers': {
        'console': {
            'level': 'INFO',
            'class': 'logging.StreamHandler',
            'formatter': 'simple'
        },
        'django_file': {
            'level': 'INFO',
            'class': 'logging.handlers.RotatingFileHandler',
            'filename': LOGS_DIR / 'django.log',
            'maxBytes': 1024*1024*10,  # 10MB
            'backupCount': 5,
            'formatter': 'json',
        },
        'api_file': {
            'level': 'INFO',
            'class': 'logging.handlers.RotatingFileHandler',
            'filename': LOGS_DIR / 'api.log',
            'maxBytes': 1024*1024*10,  # 10MB
            'backupCount': 5,
            'formatter': 'json',
        },
        'business_file': {
            'level': 'INFO',
            'class': 'logging.handlers.RotatingFileHandler',
            'filename': LOGS_DIR / 'business.log',
            'maxBytes': 1024*1024*10,  # 10MB
            'backupCount': 5,
            'formatter': 'json',
        },
        'error_file': {
            'level': 'ERROR',
            'class': 'logging.handlers.RotatingFileHandler',
            'filename': LOGS_DIR / 'error.log',
            'maxBytes': 1024*1024*10,  # 10MB
            'backupCount': 5,
            'formatter': 'json',
        },
    },
    'loggers': {
        'django': {
            'handlers': ['console', 'django_file'],
            'level': 'INFO',
            'propagate': True,
        },
        'tournaments.api': {
            'handlers': ['console', 'api_file'],
            'level': 'INFO',
            'propagate': False,
        },
        'tournaments.business': {
            'handlers': ['console', 'business_file'],
            'level': 'INFO',
            'propagate': False,
        },
        'monitoring': {
            'handlers': ['console', 'api_file'],
            'level': 'INFO',
            'propagate': False,
        },
        'root': {
            'handlers': ['console', 'error_file'],
            'level': 'ERROR',
        },
    },
}

# Debug 模式下的額外日誌配置
if DEBUG:
    LOGGING['handlers']['console']['level'] = 'DEBUG'
    for logger in LOGGING['loggers'].values():
        if 'level' in logger:
            logger['level'] = 'DEBUG'